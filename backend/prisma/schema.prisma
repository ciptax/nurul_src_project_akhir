// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int @id @default(autoincrement())
  nama        String
  email       String @unique
  role        String
  password    String

  checkout    Checkout[]
  order       Order[]
  transaction Transaction[]

  @@map("users")
}

model Category {
  id        Int @id @default(autoincrement())
  nama      String
  product   Product[]

  @@map("categories")
}

model Product {
  id            Int @id @default(autoincrement())
  namaBarang    String @map("nama_barang")
  hargaBarang   Int @map("harga_barang")
  hargaAwal     Int @map("harga_Awal")
  stokBarang    Int @map("stok_barang")
  picUrl        String? @map("pic_url")
  category      Category? @relation(fields: [categoryId], references: [id])
  checkout      Checkout[]
  transaction   Transaction[]

  categoryId    Int? @map("category_id")

  @@map("products")
}

model Checkout {
  id         Int @id @default(autoincrement())
  status     Int @default(0)
  quantity   Int @default(0)
  user       User @relation(fields: [userId], references: [id])
  product    Product @relation(fields: [productId], references: [id])
  order      Order[]

  userId     Int @map("user_id")
  productId  Int @map("product_id")

  @@map("checkouts")
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
}
model Order {
  id            Int           @id @default(autoincrement())
  status        OrderStatus   @default(PENDING) 
  user          User          @relation(fields: [userId], references: [id])
  checkout      Checkout      @relation(fields: [checkoutId], references: [id])

  userId        Int           @map("user_id")
  checkoutId    Int           @map("checkout_id")

  paymentMethod String?        
  paymentStatus String?

  @@map("orders")
}

model Transaction {
  id          Int @id @default(autoincrement())
  status      Int @default(0)
  user        User @relation(fields: [userId], references: [id])
  product     Product @relation(fields: [productId], references: [id])

  userId      Int @map("user_id")
  productId   Int @map("product_id")

  @@map("transactions")
}
model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())

  @@map("contacts")
}
